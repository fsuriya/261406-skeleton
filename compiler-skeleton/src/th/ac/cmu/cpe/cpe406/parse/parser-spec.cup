package th.ac.cmu.cpe.cpe406.parse;

import th.ac.cmu.cpe.cpe406.ast.*;
import th.ac.cmu.cpe.cpe406.lex.*;
import th.ac.cmu.cpe.cpe406.util.ErrorInfo;
import th.ac.cmu.cpe.cpe406.util.ErrorQueue;
import th.ac.cmu.cpe.cpe406.util.Position;

import java_cup.runtime.ComplexSymbolFactory;
import java_cup.runtime.Symbol;

import java.io.BufferedWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.Collections;
import java.util.LinkedList;
import java.util.List;

parser Grm {:

    protected Lexer lexer;
    protected ErrorQueue eq;
    protected PrintWriter parsedpw;

    protected boolean parseErrorReported;

    public Grm(Lexer lexer, ErrorQueue eq, PrintWriter parsedpw) {
        this(null, new ComplexSymbolFactory());
        this.lexer = lexer;
        this.eq = eq;
        this.parsedpw = parsedpw;
    }

    @Override
    public void syntax_error(Symbol current) {
        Token token = (Token) current.value;
        Position p = token.getPosition();
        String msg = "Syntax error: unexpected " + current.value + ".";
        if (!(token instanceof LexErrorToken))
            report_error(msg, p);
        syntax_error_file(msg, p);
    }

    protected void syntax_error_file(String msg, Position p) {
        if (parsedpw != null && !parseErrorReported) {
            try (BufferedWriter bw = new BufferedWriter(parsedpw);) {
                bw.write(p.line() + ":" + p.column() + " error:" + msg
                        + "\n");
            }
            catch (IOException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            }
            parseErrorReported = true;
        }
    }

  /**
   * Override the default CUP routine.
   */
  @Override
  public void report_error(String message, Object info) {
    if (info instanceof Position)
    eq.enqueue(ErrorInfo.SYNTAX_ERROR, message, (Position) info);
    else
    eq.enqueue(ErrorInfo.SYNTAX_ERROR, message);
  }

    /**
     * The standard scanning routine for use in the CUP "scan with"
     * declaration. Should read:
     *   scan with { : return nextSymbol(); : }
     */
    public Symbol nextSymbol() throws java.io.IOException {
        Token t = lexer.nextToken();
        if (t.symbol() == sym.error) {
            syntax_error_file("lexical error", t.getPosition());
        }

        return getSymbolFactory().newSymbol(t.toString(), t.symbol(), t);
    }

    /**
     * Return the source position of the Node.
     */
    public Position pos(Node n) {
        if (n == null) {
            return null;
        }
        return n.position();
    }

    /**
     * Return the position of the Token.
     */
    public Position pos(Token t) {
        if (t == null) return null;
        return t.getPosition();
    }

    /**
     * Return the source position of the first element in the list to the
     * last element in the list.
     */
    public Position pos(List<?> l) {
        if (l == null || l.isEmpty()) {
            return null;
        }

        return pos(l.get(0), l.get(l.size() - 1));
    }

    public Position pos(Object first, Object last) {
        return pos(first, last, first);
    }

    public Position pos(Object first, Object last, Object noEndDefault) {
        Position fpos = posForObject(first);
        Position epos = posForObject(last);

        if (fpos != null && epos != null) {
            if (epos.endColumn() != Position.END_UNUSED) {
                return new Position(fpos, epos);
            }

            // the end line and column are not being used in this extension.
            // so return the default for that case.
            return posForObject(noEndDefault);
        }
        if (epos == null) {
            return posForObject(noEndDefault);
        }
        return null;

    }

    protected Position posForObject(Object o) {
        if (o instanceof Node) {
            return pos((Node) o);
        }
        else if (o instanceof Token) {
            return pos((Token) o);
        }
        else if (o instanceof List) {
            return pos((List<?>) o);
        }
        else {
            return null;
        }
    }

    protected Id id(Identifier id) {
        return new Id_c(pos(id), id.getIdentifier());
    }
:};

scan with {: return nextSymbol(); :};

terminal Token INT, BOOLEAN, CHAR;
terminal Identifier IDENTIFIER;

terminal IntegerLiteral INTEGER_LITERAL, INTEGER_LITERAL_BD;
terminal CharacterLiteral CHARACTER_LITERAL;
terminal BooleanLiteral BOOLEAN_LITERAL;
terminal StringLiteral STRING_LITERAL;

terminal COLON, SEMICOLON, COMMA;
terminal EQ;

terminal PLUS, MINUS;
terminal MULT, DIV, MOD;
terminal LPAREN, RPAREN;
terminal LBRACE, RBRACE;
terminal IF, ELSE;

nonterminal Program program;
nonterminal LocalDecl var_decl;

nonterminal TypeNode type;
nonterminal TypeNode primitive_type;

nonterminal List<Stmt> stmt_list_opt, stmt_list;
nonterminal List<Variable> lvalue;
nonterminal List<Expr> rvalue;
nonterminal semicolon_opt;
nonterminal Stmt stmt, pre_stmt, stmt_no_if;
nonterminal Stmt var_decl_stmt;
nonterminal IfStmt if_else, if;
nonterminal TypeNode var_decl_type;
nonterminal Stmt assignment_stmt;
nonterminal Expr primary;
nonterminal Expr expr, term, factor;
nonterminal Block block;
start with program;

program ::=
    stmt_list_opt:stmts {:
        RESULT = new Program_c(parser.pos(stmts), lexer.file(), stmts);
    :}
;

var_decl ::=
    IDENTIFIER:id COLON type:type {:
        RESULT = new LocalDecl_c(parser.pos(id, type), parser.id(id), type);
    :}
;

type ::=
    primitive_type:type {:
        RESULT = type;
    :}
;

primitive_type ::=
    INT:i {:
        RESULT = new PrimitiveTypeNode_c(parser.pos(i), PrimitiveTypeNode.Kind.INT);
    :}
    | BOOLEAN:i {:
		RESULT = new PrimitiveTypeNode_c(parser.pos(i), PrimitiveTypeNode.Kind.BOOLEAN);
	:}
	| CHAR:i {:
		RESULT = new PrimitiveTypeNode_c(parser.pos(i), PrimitiveTypeNode.Kind.CHAR);
	:}
;

stmt_list_opt ::=
    /* empty */ {:
        RESULT = Collections.emptyList();
    :}
    | stmt_list:l {:
        RESULT = l;
    :}
;

stmt_list ::=
    pre_stmt:s {:
        List<Stmt> l = new LinkedList<>();
        l.add(s);
        RESULT = l;
    :}
    | stmt_list:l pre_stmt:s {:
        l.add(s);
        RESULT = l;
    :}
;
pre_stmt ::= 
	stmt:s{:
		RESULT = s;
	:}
	| if_else:s {:
		RESULT = s;
	:}
	| if:s {:
		RESULT = s;
	:}
;
stmt ::=
	/* empty stmt*/ SEMICOLON {:
		RESULT = null;
	:}
    var_decl_stmt:d SEMICOLON {:
        RESULT = d;
    :}
    | assignment_stmt:a SEMICOLON {:
        RESULT = a;
    :}
    | block:b {:
		RESULT = b;
	:}
;
block::=
	LBRACE:l stmt_list_opt:s RBRACE:r {:
		RESULT = new Block_c(parser.pos(l,r), s);
	:}
;
if_else::=
	IF:s expr:c stmt_no_if:t ELSE pre_stmt:e {:
		RESULT = new IfStmt_c(parser.pos(s,e), c, t, e);
	:}
;
if::=
	IF:s expr:c pre_stmt:t {:
		RESULT = new IfStmt_c(parser.pos(s,t), c, t);
	:}
;
stmt_no_if::=
	stmt:s {:
		RESULT = s;
	:}
	| IF:s expr:c stmt_no_if:t ELSE stmt_no_if:e {:
		RESULT = new IfStmt_c(parser.pos(s,e), c, t, e);
	:}
;
var_decl_stmt ::=
    var_decl:decl {:
        RESULT = decl;
    :}
;

var_decl_type ::=
    primitive_type:type {:
        RESULT = type;
    :}
;

assignment_stmt ::=
    lvalue:l EQ rvalue:r {:
        RESULT = new Assign_c(parser.pos(l, r), l ,r);
    :}
;

lvalue ::=
	IDENTIFIER:id {:
        Variable obj = new Variable_c(parser.pos(id), parser.id(id));
		List<Variable> l = new LinkedList<>();
        l.add(obj);
        RESULT = l;
    :}
	| lvalue:l COMMA IDENTIFIER:id {:
        Variable obj = new Variable_c(parser.pos(id), parser.id(id));
		l.add(obj);
        RESULT = l;
	:}
;
rvalue ::=
	expr:id {:
		List<Expr> l = new LinkedList<>();
        l.add(id);
        RESULT = l;
    :}
	| rvalue:l COMMA expr:id {:
		l.add(id);
        RESULT = l;
	:}
;

expr ::=
	expr:l PLUS term:r {:
		RESULT = new Plus_c(parser.pos(l, r), l ,r);
	:}
	| expr:l MINUS term:r {:
		RESULT = new Plus_c(parser.pos(l, r), l ,r);
	:}
	| BOOLEAN_LITERAL:id {:
		RESULT = new Boolean_c(parser.pos(id), id.getValue().booleanValue());
	:} 	
	| term:l {:
		RESULT = l;
	:}
;

term ::=
	term:l MULT factor:r {:
		RESULT = new Mult_c(parser.pos(l, r), l ,r);
	:}
	| term:l DIV factor:r {:
		RESULT = new Mult_c(parser.pos(l, r), l ,r);
	:}
	| term:l MOD factor:r {:
		RESULT = new Mult_c(parser.pos(l, r), l ,r);
	:}	
	| factor:f {:
		RESULT = f;
	:}
;

factor ::=
	IDENTIFIER:id {:
        RESULT = new Variable_c(parser.pos(id), parser.id(id));
    :}
	| INTEGER_LITERAL:id {:
		RESULT = new Num_c(parser.pos(id), id.getValue().intValue());
	:}
	| LPAREN expr:e RPAREN {:
		RESULT = e;
	:}
;
